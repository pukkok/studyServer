Node.js ?
- 구글 v8 엔진으로 만든 자바스크립트 런타임
=> 자바스크립트를 실시간으로 실행시켜주는 인터프린터(해석기)

런타임 ? 자바스크립트가 실행되는 환경
브라우저 - 런타임
로컬pc - 런타임

Node.js 대신 Express.js 사용 이유
서버 구현에 필요한 자주 사용하는 변수나 함수(API)를 제공

entry point: (index.js)

CommonJS : module.exports, require (기존에 많이 사용되던 방식)
ES 모듈 : export default, import (자바스크립트 표준)

API 테스터 사용 (post, get, delete는 확인이 불가능)

- 서버 ---------------- 브라우저 -
 미들웨어1     <- 요청   1. 공통 미들웨어           
    ↓         응답 ->   2. 라우트 미들웨어          
 미들웨어2                     
    ↓                          
 미들웨어3

middleware2의 next = middleware3

서버는 껐다 켜야 작동한다.

브라우저에서 요청받아 응답을 보내고 나면 아래쪽 함수들은 실행하지 않는다.


애플리케이션 레벨 미들웨어 app.METHOD() || app.use()

리액트 : Nested Routes
<Routes>
    <Route path="/post" element={<Post/>}>
        <Route path="/:postId" element={<Post/>}></Route>
    </Route>
</Routes>

1) 정적 사이트 (static site)
html 파일이 안바뀜

서버 -- 브라우저
하드코딩 된 그대로

2) 동적 사이트 (dynamic site)
html 파일을 동적으로 생성

SSR 서버 사이드 렌더링 : 서버쪽에서 HTML 파일 생성 (템플릿 엔진 PUG, ngex)
DB 데이터 + 템플릿 엔진 => html 생성 => 브라우저로 전송

CSR 클라이언트 사이드 렌더링 : 브라우저쪽에서 HTML 파일 생성 (자바스크립트로 HTML 생성)
DB JSON문자열 + JSX 엘리먼트 => HTML 파일 생성

서버 <- 요청 브라우저
    응답 ->

요청
request header
+ request body = 페이로드(pay load)

응답
response header
+ response body

header : 메타데이터 
body : 실제 전송되는 데이터